node:
  cluster: front-envoy
admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8090
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8443
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
              log_format:
              ## This is an example for an access log format, when the time comes we will need to think about when we want to log and what to log
              typed_json_format: 
                "@timestamp": "%START_TIME%"
                client:
                  address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                  direct:
                    remote:
                      address: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%"
                  local:
                    address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                  remote:
                    address_no_port: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                envoy:
                  route:
                    name: "%ROUTE_NAME%"
                  upstream:
                    cluster: "%UPSTREAM_CLUSTER%"
                    localaddress: "%UPSTREAM_LOCAL_ADDRESS%"
                    transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                host:
                  hostname: "%HOSTNAME%"
                http:
                  request:
                    body:
                      bytes: "%BYTES_RECEIVED%"
                    headers:
                      accept: "%REQ(ACCEPT)%"
                      authority: "%REQ(:AUTHORITY)%"
                      content-length: "%REQ(CONTENT-LENGTH)%"
                      content-type: "%REQ(CONTENT-TYPE)%"
                      host: "%REQ(HOST)%"
                      id: "%REQ(X-REQUEST-ID)%"
                      session-id: "%REQ(SESSION-ID)%"
                      correlation-id: "%REQ(CORRELATION-ID)%"
                      x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"
                      x_envoy_internal: "%REQ(X-ENVOY-INTERNAL)%"
                      x_envoy_decorator_operation: "%REQ(X-ENVOY-DECORATOR-OPERATION)%"
                      x_envoy_expected_rq_timeout_ms: "%REQ(X-ENVOY-EXPECTED-RQ-TIMEOUT-MS)%"
                      x_b3_traceid: "%REQ(X-B3-TRACEID)%"
                      x_b3_parentspanid: "%REQ(X-B3-PARENTSPANID)%"
                      x_b3_spanid: "%REQ(X-B3-SPANID)%"
                      x_b3_sampled: "%REQ(X-B3-SAMPLED)%"
                    method: "%REQ(:METHOD)%"
                    path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  response:
                    body:
                      bytes: "%BYTES_SENT%"
                    duration_resp: "%RESPONSE_DURATION%"
                    duration_tx: "%RESPONSE_TX_DURATION%"
                    flags: "%RESPONSE_FLAGS%"
                    headers:
                      access-control-allow-origin: "%RESP(ACCESS-CONTROL-ALLOW-ORIGIN)%"
                      content-length: "%RESP(CONTENT-LENGTH)%"
                      content-type: "%RESP(CONTENT-TYPE)%"
                      date: "%RESP(DATE)%"
                      server: "%RESP(SERVER)%"
                    status_code: "%RESPONSE_CODE%"
                    status_code_details: "%RESPONSE_CODE_DETAILS%"
                  version: "%PROTOCOL%"
          codec_type: AUTO
          generate_request_id: true
          tracing: # configuration for jaeger tracer
            provider:
            provider:
              name: envoy.tracers.zipkin
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
                collector_cluster: jaeger
                collector_endpoint: "/api/v2/spans"
                shared_span_context: false
                collector_endpoint_version: HTTP_JSON
          stat_prefix: ingress_https
          route_config:
            name: local_route
            virtual_hosts:
            - name: backend
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/api.Echo/"
                route:
                  cluster: echo-grpc
              - match:
                  prefix: "/api.Reverse/"
                route:
                  cluster: reverse-grpc
          http_filters:
          - name: envoy.filters.http.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: false
              headers:
              - name: ":path"
                exact_match: "/healthz"
              - name: "x-envoy-livenessprobe"
                exact_match: "healthz"
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: "/etc/ssl/envoy/tls.crt"
              private_key:
                filename: "/etc/ssl/envoy/tls.key"
  clusters:
  # A list of backend services we want the front proxy to route to
  - name: echo-grpc
    type: STRICT_DNS
    connect_timeout: 0.5s # The timeout for new network connections to hosts in the cluster
    lb_policy: ROUND_ROBIN # See docs for all types https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-enum-config-cluster-v3-cluster-lbpolicy
    load_assignment:
      cluster_name: echo-grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: echo-grpc.envoy.svc.cluster.local
                port_value: 8786
    health_checks: # Optional active health checking configuration for the cluster
      # This is for debuging, please remove on production
      always_log_health_check_failures: true
      event_log_path: "/tmp/health_checks_echo-grpc.log"
      timeout: 1s
      interval: 30s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
    # Refer to configuration docs
    # https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/circuit_breaker.proto#envoy-v3-api-msg-config-cluster-v3-circuitbreakers
    circuit_breakers:
      thresholds:
      - priority: "DEFAULT"
        max_connections: 1024 # The maximum number of connections that Envoy will establish to all hosts in an upstream cluster.
        max_pending_requests: 1024 # The maximum number of requests that will be queued while waiting for a ready connection pool connection.
        max_requests: 1024 # The maximum number of parallel requests that Envoy will make to the upstream cluster.
        max_retries: 3     # The maximum number of parallel retries that Envoy will allow to the upstream cluster.
        retry_budget:      # Specifies a limit on concurrent retries in relation to the number of active requests.
          budget_percent:
            value: 20.0
          min_retry_concurrency: 3
        track_remaining: true # stats will be published that expose the number of resources remaining until the circuit breakers open.
    common_lb_config:
      ignore_new_hosts_until_first_hc: true # exclude new hosts when computing load balancing weights until they have been health checked for the first time.
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options:
            max_concurrent_streams: 100
  - name: reverse-grpc
    type: STRICT_DNS
    connect_timeout: 0.5s # The timeout for new network connections to hosts in the cluster
    lb_policy: ROUND_ROBIN # See docs for all types https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-enum-config-cluster-v3-cluster-lbpolicy
    load_assignment:
      cluster_name: reverse-grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: reverse-grpc.envoy.svc.cluster.local
                port_value: 8786
    health_checks: # Optional active health checking configuration for the cluster
      # This is for debuging, please remove on production
      always_log_health_check_failures: true
      event_log_path: "/tmp/health_checks_reverse-grpc.log"
      timeout: 1s
      interval: 30s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
    # Refer to configuration docs
    # https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/circuit_breaker.proto#envoy-v3-api-msg-config-cluster-v3-circuitbreakers
    circuit_breakers:
      thresholds:
      - priority: "DEFAULT"
        max_connections: 1024 # The maximum number of connections that Envoy will establish to all hosts in an upstream cluster.
        max_pending_requests: 1024 # The maximum number of requests that will be queued while waiting for a ready connection pool connection.
        max_requests: 1024 # The maximum number of parallel requests that Envoy will make to the upstream cluster.
        max_retries: 3 # The maximum number of parallel retries that Envoy will allow to the upstream cluster.
        retry_budget: # Specifies a limit on concurrent retries in relation to the number of active requests.
          budget_percent:
            value: 20.0
          min_retry_concurrency: 3
        track_remaining: true # stats will be published that expose the number of resources remaining until the circuit breakers open.
    common_lb_config:
      ignore_new_hosts_until_first_hc: true # exclude new hosts when computing load balancing weights until they have been health checked for the first time.
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        explicit_http_config:
          http2_protocol_options:
            max_concurrent_streams: 100
  - name: jaeger
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: jaeger
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: simplest-collector.envoy.svc.cluster.local
                port_value: 9411
