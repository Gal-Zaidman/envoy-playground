node:
  cluster: echo-grpc
admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      address: 0.0.0.0 # Unsecured stats endpoint, listen on all address
      port_value: 8090 # the metrics port
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: 8786 # The envoy port
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
              ## This is an example for an access log format, when the time comes we will need to think about when we want to log and what to log
              typed_json_format: 
                "@timestamp": "%START_TIME%"
                client:
                  address: "%DOWNSTREAM_REMOTE_ADDRESS%"
                  direct:
                    remote:
                      address: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%"
                  local:
                    address: "%DOWNSTREAM_LOCAL_ADDRESS%"
                  remote:
                    address_no_port: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%"
                envoy:
                  route:
                    name: "%ROUTE_NAME%"
                  upstream:
                    cluster: "%UPSTREAM_CLUSTER%"
                    localaddress: "%UPSTREAM_LOCAL_ADDRESS%"
                    transport_failure_reason: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                host:
                  hostname: "%HOSTNAME%"
                http:
                  request:
                    body:
                      bytes: "%BYTES_RECEIVED%"
                    headers:
                      accept: "%REQ(ACCEPT)%"
                      authority: "%REQ(:AUTHORITY)%"
                      content-length: "%REQ(CONTENT-LENGTH)%"
                      content-type: "%REQ(CONTENT-TYPE)%"
                      host: "%REQ(HOST)%"
                      id: "%REQ(X-REQUEST-ID)%"
                      session-id: "%REQ(SESSION-ID)%"
                      correlation-id: "%REQ(CORRELATION-ID)%"
                      x_forwarded_for: "%REQ(X-FORWARDED-FOR)%"
                      x_forwarded_proto: "%REQ(X-FORWARDED-PROTO)%"
                      x_envoy_internal: "%REQ(X-ENVOY-INTERNAL)%"
                      x_envoy_decorator_operation: "%REQ(X-ENVOY-DECORATOR-OPERATION)%"
                      x_envoy_expected_rq_timeout_ms: "%REQ(X-ENVOY-EXPECTED-RQ-TIMEOUT-MS)%"
                      x_b3_traceid: "%REQ(X-B3-TRACEID)%"
                      x_b3_parentspanid: "%REQ(X-B3-PARENTSPANID)%"
                      x_b3_spanid: "%REQ(X-B3-SPANID)%"
                      x_b3_sampled: "%REQ(X-B3-SAMPLED)%"
                    method: "%REQ(:METHOD)%"
                    path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                  response:
                    body:
                      bytes: "%BYTES_SENT%"
                    duration_resp: "%RESPONSE_DURATION%"
                    duration_tx: "%RESPONSE_TX_DURATION%"
                    flags: "%RESPONSE_FLAGS%"
                    headers:
                      access-control-allow-origin: "%RESP(ACCESS-CONTROL-ALLOW-ORIGIN)%"
                      content-length: "%RESP(CONTENT-LENGTH)%"
                      content-type: "%RESP(CONTENT-TYPE)%"
                      date: "%RESP(DATE)%"
                      server: "%RESP(SERVER)%"
                    status_code: "%RESPONSE_CODE%"
                    status_code_details: "%RESPONSE_CODE_DETAILS%"
                  version: "%PROTOCOL%"
          codec_type: AUTO
          generate_request_id: true
          tracing:
            provider:
              name: envoy.tracers.zipkin
              typed_config:
                "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
                collector_cluster: jaeger
                collector_endpoint: "/api/v2/spans"
                shared_span_context: false
                collector_endpoint_version: HTTP_PROTO
          stat_prefix: ingress_https
          route_config:
            name: local_route
            virtual_hosts:
            - name: https
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/api.Echo/"
                route:
                  cluster: echo-grpc
              - match:
                  prefix: "/grpc.health.v1.Health/Check"
                route:
                  cluster: echo-grpc
          http_filters:
          - name: envoy.filters.http.grpc_stats
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
              stats_for_all_methods: true
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
  - name: echo-grpc
    connect_timeout: 0.5s
    type: STATIC
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: echo-grpc
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "127.0.0.1"
                port_value: 8081 # The echo-grpc port
    health_checks:
      # This is for debuging, please remove on production
      always_log_health_check_failures: true
      event_log_path: "/tmp/health_checks_echo-grpc.log"
      timeout: 1s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
  - name: jaeger
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: jaeger
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: simplest-collector.envoy.svc.cluster.local
                port_value: 9411
